'use client';

import { useEffect } from 'react';
import { signOut, useSession } from 'next-auth/react';

/**
 * Componente que sincroniza el cierre de sesi칩n entre m칰ltiples pesta침as/ventanas
 * del navegador usando el evento storage de localStorage.
 * 
 * Cuando un usuario cierra sesi칩n en una pesta침a, todas las dem치s pesta침as
 * abiertas detectar치n el cambio y cerrar치n sesi칩n autom치ticamente.
 */
export default function SessionSyncHandler() {
  const { data: session, status } = useSession();

  useEffect(() => {
    // Solo ejecutar en el cliente
    if (typeof window === 'undefined') return;

    /**
     * Handler que escucha cambios en localStorage
     * Se dispara cuando otra pesta침a modifica localStorage
     */
    const handleStorageChange = (event: StorageEvent) => {
      // Detectar cuando se ejecuta signOut en otra pesta침a
      if (event.key === 'nextauth.message') {
        try {
          const data = event.newValue ? JSON.parse(event.newValue) : null;
          
          // Si el evento es de tipo 'session' y el data es null, significa logout
          if (data?.event === 'session' && data?.data === null) {
            console.log('游댃 [SessionSync] Sesi칩n cerrada en otra pesta침a, sincronizando...');
            
            // Cerrar sesi칩n en esta pesta침a tambi칠n
            // redirect: false para evitar redirecci칩n m칰ltiple
            signOut({ redirect: false }).then(() => {
              // Redirigir manualmente despu칠s de cerrar sesi칩n
              window.location.href = '/';
            });
          }
        } catch (error) {
          console.error('Error procesando cambio de sesi칩n:', error);
        }
      }

      // Detectar cuando se elimina la cookie de sesi칩n directamente
      if (event.key?.includes('next-auth.session-token') && !event.newValue) {
        console.log('游댃 [SessionSync] Cookie de sesi칩n eliminada en otra pesta침a');
        
        if (session) {
          signOut({ redirect: false }).then(() => {
            window.location.href = '/';
          });
        }
      }
    };

    /**
     * Handler para el evento beforeunload
     * Detecta cuando se cierra la 칰ltima pesta침a
     */
    const handleBeforeUnload = () => {
      // Marcar que esta pesta침a se est치 cerrando
      sessionStorage.setItem('tab-closing', 'true');
    };

    /**
     * Handler para el evento visibilitychange
     * Detecta cuando la pesta침a se vuelve visible y verifica la sesi칩n
     */
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        // Verificar si la sesi칩n sigue activa al volver a la pesta침a
        if (sessionStorage.getItem('tab-closing') === 'true') {
          sessionStorage.removeItem('tab-closing');
        }
        
        // Si no hay sesi칩n pero deber칤a haberla, recargar
        if (status === 'authenticated' && !session) {
          console.log('游댃 [SessionSync] Sesi칩n perdida, recargando...');
          window.location.reload();
        }
      }
    };

    // Registrar event listeners
    window.addEventListener('storage', handleStorageChange);
    window.addEventListener('beforeunload', handleBeforeUnload);
    document.addEventListener('visibilitychange', handleVisibilityChange);

    // Cleanup al desmontar
    return () => {
      window.removeEventListener('storage', handleStorageChange);
      window.removeEventListener('beforeunload', handleBeforeUnload);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [session, status]);

  // Este componente no renderiza nada visible
  return null;
}
