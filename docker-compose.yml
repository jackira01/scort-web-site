version: '3.8'

services:
  # Redis Service for Development
  redis:
    image: redis:7-alpine
    container_name: scort-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - scort-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MongoDB Service for Development
  mongodb:
    image: mongo:7.0
    container_name: scort-mongodb-dev
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-scort-web-site}
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - ./backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - scort-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Networks
networks:
  scort-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Volumes
volumes:
  redis-data:
    driver: local
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local